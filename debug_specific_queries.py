#!/usr/bin/env python3
"""
Script para diagnosticar consultas espec√≠ficas y verificar si el RAG encuentra la informaci√≥n correcta
"""

import os
import sys

def test_specific_queries():
    """Probar consultas espec√≠ficas sobre informaci√≥n de contacto"""
    print("üîç DIAGNOSTICANDO CONSULTAS ESPEC√çFICAS")
    print("=" * 60)
    print()
    
    try:
        from utils.vector_functions import get_combined_retriever
        
        # Crear retriever
        retriever = get_combined_retriever()
        
        # Consultas espec√≠ficas sobre informaci√≥n de contacto
        test_queries = [
            "n√∫mero de tel√©fono para devoluciones",
            "tel√©fono devoluciones",
            "WhatsApp devoluciones",
            "email devoluciones",
            "devoluciones@ecomarket.com",
            "324 456 4450",
            "300 333 4567",
            "proceso de devoluci√≥n contacto",
            "servicio de atenci√≥n al cliente devoluciones"
        ]
        
        for i, query in enumerate(test_queries, 1):
            print(f"\n{'='*20} CONSULTA {i} {'='*20}")
            print(f"üîç Consulta: {query}")
            print("-" * 50)
            
            try:
                docs = retriever.get_relevant_documents(query)
                print(f"üìä Documentos encontrados: {len(docs)}")
                
                if docs:
                    for j, doc in enumerate(docs[:3]):  # Mostrar m√°ximo 3
                        print(f"\n  üìÑ Documento {j+1}:")
                        print(f"    Fuente: {doc.metadata.get('source', 'Unknown')}")
                        print(f"    Tipo: {doc.metadata.get('file_type', 'Unknown')}")
                        print(f"    Contenido: {doc.page_content}")
                        
                        # Verificar si contiene informaci√≥n de contacto real
                        content = doc.page_content
                        if "324 456 4450" in content:
                            print("    ‚úÖ ¬°Contiene el tel√©fono correcto!")
                        elif "300 333 4567" in content:
                            print("    ‚úÖ ¬°Contiene el WhatsApp correcto!")
                        elif "devoluciones@ecomarket.com" in content:
                            print("    ‚úÖ ¬°Contiene el email correcto!")
                        else:
                            print("    ‚ùå No contiene informaci√≥n de contacto espec√≠fica")
                else:
                    print("  ‚ùå No se encontraron documentos relevantes")
                    
            except Exception as e:
                print(f"  ‚ùå Error en consulta: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_document_content():
    """Verificar el contenido real del documento"""
    print("\n" + "=" * 60)
    print("üìÑ VERIFICANDO CONTENIDO REAL DEL DOCUMENTO")
    print("=" * 60)
    print()
    
    try:
        # Leer el archivo directamente
        with open("./static/sample_documents/politica_devoluciones.txt", "r", encoding="utf-8") as f:
            content = f.read()
        
        print("üìÑ Contenido del archivo politica_devoluciones.txt:")
        print("-" * 50)
        
        # Buscar l√≠neas con informaci√≥n de contacto
        lines = content.split('\n')
        contact_lines = []
        
        for i, line in enumerate(lines):
            if any(keyword in line.lower() for keyword in ['tel√©fono', 'whatsapp', 'email', 'devoluciones@']):
                contact_lines.append(f"L√≠nea {i+1}: {line}")
        
        print("üìû Informaci√≥n de contacto encontrada:")
        for line in contact_lines:
            print(f"  {line}")
        
        # Verificar n√∫meros espec√≠ficos
        print("\nüîç Verificando n√∫meros espec√≠ficos:")
        if "324 456 4450" in content:
            print("  ‚úÖ Tel√©fono 324 456 4450 encontrado")
        else:
            print("  ‚ùå Tel√©fono 324 456 4450 NO encontrado")
            
        if "300 333 4567" in content:
            print("  ‚úÖ WhatsApp 300 333 4567 encontrado")
        else:
            print("  ‚ùå WhatsApp 300 333 4567 NO encontrado")
            
        if "devoluciones@ecomarket.com" in content:
            print("  ‚úÖ Email devoluciones@ecomarket.com encontrado")
        else:
            print("  ‚ùå Email devoluciones@ecomarket.com NO encontrado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error leyendo documento: {e}")
        return False

def test_rag_retrieval():
    """Probar espec√≠ficamente la recuperaci√≥n RAG"""
    print("\n" + "=" * 60)
    print("üîç PROBANDO RECUPERACI√ìN RAG ESPEC√çFICA")
    print("=" * 60)
    print()
    
    try:
        from utils.vector_functions import load_collection
        
        # Cargar colecci√≥n directamente
        vectordb = load_collection("sample_documents")
        
        # B√∫squeda espec√≠fica
        query = "tel√©fono devoluciones"
        print(f"üîç B√∫squeda: {query}")
        
        # Usar similarity_search directamente
        docs = vectordb.similarity_search(query, k=5)
        print(f"üìä Documentos encontrados: {len(docs)}")
        
        for i, doc in enumerate(docs):
            print(f"\n  üìÑ Documento {i+1}:")
            print(f"    Fuente: {doc.metadata.get('source', 'Unknown')}")
            print(f"    Contenido: {doc.page_content}")
            
            # Verificar si contiene el tel√©fono correcto
            if "324 456 4450" in doc.page_content:
                print("    ‚úÖ ¬°Contiene el tel√©fono correcto!")
            else:
                print("    ‚ùå No contiene el tel√©fono correcto")
        
        # B√∫squeda con score
        print(f"\nüîç B√∫squeda con scores: {query}")
        docs_with_scores = vectordb.similarity_search_with_score(query, k=5)
        
        for i, (doc, score) in enumerate(docs_with_scores):
            print(f"\n  üìÑ Documento {i+1} (score: {score:.3f}):")
            print(f"    Fuente: {doc.metadata.get('source', 'Unknown')}")
            print(f"    Contenido: {doc.page_content[:200]}...")
            
            if "324 456 4450" in doc.page_content:
                print("    ‚úÖ ¬°Contiene el tel√©fono correcto!")
            else:
                print("    ‚ùå No contiene el tel√©fono correcto")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test RAG: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ Diagnosticando problema de informaci√≥n inventada...")
    print()
    
    # Test 1: Verificar contenido real
    test_document_content()
    
    # Test 2: Probar recuperaci√≥n RAG
    test_rag_retrieval()
    
    # Test 3: Probar consultas espec√≠ficas
    test_specific_queries()
    
    print("\n" + "=" * 60)
    print("üìä DIAGN√ìSTICO COMPLETADO")
    print("=" * 60)
    print("Si el RAG no encuentra la informaci√≥n correcta,")
    print("el problema puede estar en:")
    print("1. Fragmentaci√≥n incorrecta del documento")
    print("2. Embeddings no capturan bien la informaci√≥n espec√≠fica")
    print("3. Configuraci√≥n del retriever")
    print("4. El modelo de lenguaje genera informaci√≥n inventada")

if __name__ == "__main__":
    main()
